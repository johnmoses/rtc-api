"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
DEBUG = int(os.environ.get('DEBUG', default=0))
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(' ')
CORS_ORIGIN_WHITELIST = os.environ.get('CORS_ORIGIN_WHITELIST').split(' ')

# ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS = [
#     '10.0.2.2',
#     'localhost',
#     'localhost:3000', 
#     'localhost:8000'
# ]

# CORS_ORIGIN_WHITELIST = (
#     'http://127.0.0.1:3000',
#     'http://localhost:3000',
# )

CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOW_CREDENTIALS = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',

    # External apps
    'rest_framework',
    'rest_framework.authtoken',
    'graphene_django',
    'graphql_jwt.refresh_token.apps.RefreshTokenConfig',
    'corsheaders',
    'django_filters',
    'channels',
    'sms',
    'pyotp',

    # Local apps
    'api.accounts',
    'api.analytics',
    'api.meetings',
]

SITE_ID = 1

AUTH_USER_MODEL = 'accounts.User'

GRAPHENE = {
    'SCHEMA': 'api.api.schema',
    'MIDDLEWARE': [
        'graphql_jwt.middleware.JSONWebTokenMiddleware',
    ]
}

GRAPHQL_JWT = {
    "JWT_VERIFY_EXPIRATION": True,
    "JWT_LONG_RUNNING_REFRESH_TOKEN": True,
    # "JWT_REFRESH_EXPIRED_HANDLER": lambda orig_iat, context: False,
    'JWT_EXPIRATION_DELTA':timedelta(minutes=120),
    'JWT_REFRESH_EXPIRATION_DETLA':timedelta(days=7),
    # "JWT_ALLOW_ANY_CLASSES": [
    #     "graphql_auth.mutations.Register",
    #     "graphql_auth.mutations.VerifyAccount",
    #     "graphql_auth.mutations.ResendActivationEmail",
    #     "graphql_auth.mutations.SendPasswordResetEmail",
    #     "graphql_auth.mutations.PasswordReset",
    #     "graphql_auth.mutations.ObtainJSONWebToken",
    #     "graphql_auth.mutations.VerifyToken",
    #     "graphql_auth.mutations.RefreshToken",
    #     "graphql_auth.mutations.RevokeToken",
    #     "graphql_auth.mutations.VerifySecondaryEmail",
    # ],
}

AUTHENTICATION_BACKENDS = [
    'graphql_jwt.backends.JSONWebTokenBackend',
    'django.contrib.auth.backends.ModelBackend',
]

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    )
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'

ASGI_APPLICATION = 'api.routing.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
    # 'default': {
    #     'BACKEND': 'channels_redis.core.RedisChannelLayer',
    #     'CONFIG': {
    #         "hosts": [(
    #             os.environ.get('REDISHOST', '127.0.0.1'),
    #             int(os.environ.get('REDISPORT', 6379))
    #         )],
    #     },
    # },
    # 'default': {
    #     'BACKEND': 'channels_redis.core.RedisChannelLayer',
    #     'CONFIG': {
    #         "hosts": [(
    #             '127.0.0.1', 6379
    #         )],
    #     },
    # },
}

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {},
    # 'postgres': {
    #     'ENGINE': 'django.db.backends.postgresql_psycopg2',
    #     'NAME': os.environ.get("POSTGRES_DB_NAME"),
    #     'HOST': os.environ.get("POSTGRES_DB_HOST"),
    #     'USER': os.environ.get("POSTGRES_DB_USER"),
    #     'PASSWORD': os.environ.get("POSTGRES_DB_PASSWORD"),
    #     'PORT': os.environ.get("POSTGRES_DB_PORT"),
    # },
    # 'mongo': {
    #     'ENGINE': 'djongo',
    #     'NAME': env('MONGO_DB_NAME'),
    #     'HOST': env('MONGO_DB_HOST'),
    #     'USER': env("MONGO_DB_USER"),
    #     'PASSWORD': env("MONGO_DB_PASSWORD"),
    #     'PORT': env("MONGO_DB_PORT"),
    #     'ENFORCE_SCHEMA': False,
    # },
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DATABASE_ROUTERS = [ 
    # 'api.routers.PostgresRouter',
    # 'api.routers.MongoRouter',
    'api.routers.SqliteRouter'
]

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # 64-bit


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

SMS_BACKEND = 'sms.backends.console.SmsBackend'
